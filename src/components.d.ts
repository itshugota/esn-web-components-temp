/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface EsnAppGrid {
    serializedItems: string;
  }
  interface EsnBackdrop {
    /**
     * If `true`, the backdrop can be clicked and when clicked, it will emit the `ionBackdropClick` event.
     */
    clickable: boolean;
    /**
     * If `true`, the backdrop will stop propagation on tap.
     */
    stopPropagation: boolean;
    /**
     * If `true`, the backdrop will be visible.
     */
    visible: boolean;
  }
  interface EsnPopover {
    /**
     * If `true`, the popover will be dismissed when the backdrop is clicked.
     */
    backdropDismiss: boolean;
    delay: number;
    /**
     * If `true`, a backdrop will be displayed behind the popover.
     */
    showBackdrop: boolean;
    toggleShowState: () => Promise<void>;
  }
  interface MyComponent {
    /**
     * The first name
     */
    first: string;
    /**
     * The last name
     */
    last: string;
    /**
     * The middle name
     */
    middle: string;
  }
}
declare global {
  interface HTMLEsnAppGridElement extends Components.EsnAppGrid, HTMLStencilElement {}
  var HTMLEsnAppGridElement: {
    prototype: HTMLEsnAppGridElement;
    new (): HTMLEsnAppGridElement;
  };
  interface HTMLEsnBackdropElement extends Components.EsnBackdrop, HTMLStencilElement {}
  var HTMLEsnBackdropElement: {
    prototype: HTMLEsnBackdropElement;
    new (): HTMLEsnBackdropElement;
  };
  interface HTMLEsnPopoverElement extends Components.EsnPopover, HTMLStencilElement {}
  var HTMLEsnPopoverElement: {
    prototype: HTMLEsnPopoverElement;
    new (): HTMLEsnPopoverElement;
  };
  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'esn-app-grid': HTMLEsnAppGridElement;
    'esn-backdrop': HTMLEsnBackdropElement;
    'esn-popover': HTMLEsnPopoverElement;
    'my-component': HTMLMyComponentElement;
  }
}
declare namespace LocalJSX {
  interface EsnAppGrid {
    serializedItems?: string;
  }
  interface EsnBackdrop {
    /**
     * If `true`, the backdrop can be clicked and when clicked, it will emit the `ionBackdropClick` event.
     */
    clickable?: boolean;
    /**
     * Emitted when the backdrop is clicked/tapped.
     */
    onIonBackdropClick?: (event: CustomEvent<void>) => void;
    /**
     * If `true`, the backdrop will stop propagation on tap.
     */
    stopPropagation?: boolean;
    /**
     * If `true`, the backdrop will be visible.
     */
    visible?: boolean;
  }
  interface EsnPopover {
    /**
     * If `true`, the popover will be dismissed when the backdrop is clicked.
     */
    backdropDismiss?: boolean;
    delay?: number;
    /**
     * If `true`, a backdrop will be displayed behind the popover.
     */
    showBackdrop?: boolean;
  }
  interface MyComponent {
    /**
     * The first name
     */
    first?: string;
    /**
     * The last name
     */
    last?: string;
    /**
     * The middle name
     */
    middle?: string;
  }
  interface IntrinsicElements {
    'esn-app-grid': EsnAppGrid;
    'esn-backdrop': EsnBackdrop;
    'esn-popover': EsnPopover;
    'my-component': MyComponent;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'esn-app-grid': LocalJSX.EsnAppGrid & JSXBase.HTMLAttributes<HTMLEsnAppGridElement>;
      'esn-backdrop': LocalJSX.EsnBackdrop & JSXBase.HTMLAttributes<HTMLEsnBackdropElement>;
      'esn-popover': LocalJSX.EsnPopover & JSXBase.HTMLAttributes<HTMLEsnPopoverElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
    }
  }
}
